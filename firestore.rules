rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // -------------------- USERS --------------------
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // -------------------- MESSAGES --------------------
    match /messages/{messageId} {
      // Any user can read messages
      allow get, list: if true;

      // Only sender can create a message
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;

      // Only sender or recipient can update readStatus
      allow update: if isSignedIn() &&
        (resource.data.senderId == request.auth.uid || resource.data.recipientId == request.auth.uid) &&
        request.resource.data.readStatus is string &&
        request.resource.data.senderId == resource.data.senderId &&
        request.resource.data.recipientId == resource.data.recipientId &&
        request.resource.data.message == resource.data.message;

      // Sender or recipient can delete their own message copy
      allow delete: if isSignedIn() &&
        (resource.data.senderId == request.auth.uid || resource.data.recipientId == request.auth.uid);
    }

    // -------------------- ACTIVE CHATS --------------------
    match /chats/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // -------------------- HELPER FUNCTIONS --------------------
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}
