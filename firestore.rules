/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles,
 * and allows public read access to messages, while restricting write access
 * to authenticated users, where senderId matches the user's id.
 * Active chats are also protected by user-ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profile data.
 * - /messages/{messageId}: Stores all chat messages.
 * - /chats/{userId}: Stores active chat IDs for a specific user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Messages are publicly readable, but can only be created by authenticated users,
 *   where the senderId must match the user's ID.
 * - Users can manage their own active chats.
 * - Listing of users collection is enabled to allow fetching contacts.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, list): Any user can read user profiles.
     * @allow (create): A user can create their own profile if the user ID matches.
     * @allow (update, delete): A user can update/delete their own profile if the user ID matches.
     * @deny (create): A user cannot create a profile with a mismatched user ID.
     * @deny (update, delete): A user cannot update/delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat messages.
     * @path /messages/{messageId}
     * @allow (get, list): Any user can read chat messages.
     * @allow (create): An authenticated user can create a message with their user ID as the sender.
     * @deny (update, delete): No one can update or delete messages.
     * @principle Allows public read access to messages, but restricts write access to authenticated users with matching senderId.
     */
    match /messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Controls access to active chat IDs for a specific user.
     * @path /chats/{userId}
     * @allow (get, list): A user can read their own active chats.
     * @allow (create): A user can create their own active chats document if the user ID matches.
     * @allow (update, delete): A user can update/delete their own active chats if the user ID matches.
     * @deny (create): A user cannot create an active chats document with a mismatched user ID.
     * @deny (update, delete): A user cannot update/delete another user's active chats.
     * @principle Enforces document ownership for active chat IDs.
     */
    match /chats/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}