/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection by enforcing strict ownership and access controls.
 * Read access to user profiles is restricted to the profile owner.
 * Chat messages require both sender and recipient IDs to match the authenticated user for creation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the owning user.
 * - /messages/{messageId}: Stores all chat messages; creation is allowed if the user is either the sender or recipient.
 * - /chats/active: Singleton document to track active chat IDs; write access is disallowed.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - The `chats/active` document cannot be modified through client requests.
 * - Validation of data types beyond those needed for authorization is omitted to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - The /messages collection requires both 'senderId' and 'recipientId' on each document to enable secure sender/recipient-based access control without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles; enforces ownership.
     * @path /users/{userId}
     * @allow (get) Authenticated user requests their own profile data.
     * @allow (create) Authenticated user creates their own profile.
     * @allow (update) Authenticated user updates their own profile.
     * @allow (delete) Authenticated user deletes their own profile.
     * @deny (get) Authenticated user requests another user's profile data.
     * @deny (list) Any user attempts to list all user profiles.
     * @deny (create) Authenticated user attempts to create a profile with a mismatched user ID.
     * @deny (update) Authenticated user attempts to update another user's profile.
     * @deny (delete) Authenticated user attempts to delete another user's profile.
     * @principle Enforces document ownership for all operations in a user-specific collection.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure chat messages; enforces sender/recipient-based access control.
     * @path /messages/{messageId}
     * @allow (create) Authenticated user sends a message with their ID as either sender or recipient.
     * @deny (get) Any user attempts to get a message without being the sender or recipient.
     * @deny (list) Any user attempts to list all messages without being the sender or recipient.
     * @deny (update) Any user attempts to update a message.
     * @deny (delete) Any user attempts to delete a message.
     * @principle Enforces that only the sender or recipient can create messages.
     */
    match /messages/{messageId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && (request.resource.data.senderId == request.auth.uid || request.resource.data.recipientId == request.auth.uid);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure active chats; disables all client-side writes.
     * @path /chats/active
     * @deny (get) Any user attempts to get the active chats.
     * @deny (list) Any user attempts to list active chats.
     * @deny (create) Any user attempts to create the active chats.
     * @deny (update) Any user attempts to update the active chats.
     * @deny (delete) Any user attempts to delete the active chats.
     * @principle Denies all client write access to this singleton document.
     */
    match /chats/active {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}