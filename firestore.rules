rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, ensuring only the user can manage their own profile.
     * @path /users/{userId}
     * @allow (create) User 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get,update,delete) User 'user123' can read their profile.
     * @deny (create) User 'user456' cannot create a profile with ID 'user123'.
     * @deny (get,update,delete) User 'user456' cannot read/modify/delete user 'user123' profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to chat messages, allowing any logged in user to create and get messages, but only the creator can update or delete their own messages.
     * @path /messages/{messageId}
     * @allow (create) User 'user123' can create a new message.
     * @allow (get, list) Any user can retrieve any message.
     * @deny (update, delete) User 'user456' cannot update a message created by 'user123'.
     * @principle Allows public read access to messages, but restricts creation to logged-in users and modification to the owner.
     */
    match /messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

       allow get, list: if true;
       allow create: if isSignedIn();
       allow update: if request.auth.uid == resource.data.senderId && isSignedIn();
       allow delete: if request.auth.uid == resource.data.senderId && isSignedIn();
    }

    /**
     * @description Manages active chat lists for each user, allowing each user to only manage their own list.
     * @path /chats/{userId}
     * @allow (create) User 'user123' can create their active chats list if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User 'user123' can read, update, and delete their active chats list.
     * @deny (create) User 'user456' cannot create an active chats list with ID 'user123'.
     * @deny (get, update, delete) User 'user456' cannot read, update, or delete user 'user123' active chats list.
     * @principle Enforces ownership of active chat lists, ensuring users can only manage their own data.
     */
    match /chats/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}