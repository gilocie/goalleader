/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict user-ownership and secure access patterns while relaxing data validation to accelerate prototyping.
 * All write operations are restricted to authenticated users and validated against ownership constraints.
 * Read operations default to restrictive, requiring authentication and ownership unless explicitly allowed.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profile data. Only the owner can read/write their profile.
 * - /messages/{messageId}: Stores all chat messages. All are public.
 * - /chats/active: Singleton document to track active chat IDs. Only the owner can write.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent information disclosure.
 * - The rules explicitly deny all operations that are not permitted.
 * - Data validation is minimized to facilitate rapid prototyping. Only critical fields are validated.
 * - Timestamp validation is omitted for flexibility during prototyping.
 *
 * Denormalization for Authorization:
 * The rules leverage the `request.auth.uid` variable to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the owner can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' creates their own profile document at /users/user_abc.
     * @allow (get) User with UID 'user_abc' reads their own profile document at /users/user_abc.
     * @allow (update) User with UID 'user_abc' updates their own profile document at /users/user_abc.
     * @allow (delete) User with UID 'user_abc' deletes their own profile document at /users/user_abc.
     * @deny (create) User with UID 'user_abc' attempts to create a profile for user 'user_xyz' at /users/user_xyz.
     * @deny (get) User with UID 'user_abc' attempts to read the profile of user 'user_xyz' at /users/user_xyz.
     * @deny (update) User with UID 'user_abc' attempts to update the profile of user 'user_xyz' at /users/user_xyz.
     * @deny (delete) User with UID 'user_abc' attempts to delete the profile of user 'user_xyz' at /users/user_xyz.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allow public read of all chat messages, but require authentication for write.
     * @path /messages/{messageId}
     * @allow (get) Any user (authenticated or not) can read a message.
     * @allow (list) Any user (authenticated or not) can list messages.
     *
     * @allow (create) Authenticated user can create a message.
     * @allow (update) Authenticated user can update a message.
     * @allow (delete) Authenticated user can delete a message.
     * @deny   (create) Unauthenticated user tries to create a message.
     * @deny   (update) Unauthenticated user tries to update a message.
     * @deny   (delete) Unauthenticated user tries to delete a message.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Only authenticated user can write on active chats.
     * @path /chats/active
     */
    match /chats/active {
        allow get: if true;
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}