/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user-specific data and public read access for certain collections like clientLeads and marketingContent, with restricted write access.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the owning user.
 * - /messages/{messageId}: Chat messages, accessible to any signed-in user.
 * - /calls/{callId}: Call records, accessible to any signed-in user.
 * - /chats/{userId}: Active chat IDs for a specific user, only accessible by the owning user.
 * - /users/{userId}/todos/{todoId}: To-do items, accessible only by the owning user.
 * - /users/{userId}/reports/{reportId}: User-generated reports, accessible only by the owning user.
 * - /clientLeads/{leadId}: Client leads, publicly readable but create, update, and delete are not allowed.
 * - /marketingContent/{contentId}: Marketing content, publicly readable but create, update, and delete are not allowed.
 * - /clients/{clientId}: Client records, accessible only by authenticated users.
 * - /admins/{adminId}: Admin profiles, accessible only by authenticated users.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Read-only collections: clientLeads, marketingContent
 * - Default security posture for ambiguous relationships: owner-only access.
 * - Denormalization: No denormalization required due to owner-centric design.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data, allowing only the owning user to read and write their profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user with ID {userId}.
     * @deny (get, create, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures chat messages, allowing any signed-in user to read messages. Write operations are not allowed.
     * @path /messages/{messageId}
     * @allow (get, list) if any user is signed in.
     * @deny (create, update, delete) always.
     * @principle Allows public read access but restrict write access.
     */
    match /messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Secures call records, allowing any signed-in user to read call records. Write operations are not allowed.
     * @path /calls/{callId}
     * @allow (get, list) if any user is signed in.
     * @deny (create, update, delete) always.
     */
    match /calls/{callId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Secures active chat IDs for a user, allowing only the owning user to access the active chat document.
     * @path /chats/{userId}
     * @allow (get, create, update, delete) if the request is made by the user with ID {userId}.
     * @deny (get, create, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /chats/{userId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures to-do items for a specific user, allowing only the owning user to manage their tasks.
     * @path /users/{userId}/todos/{todoId}
     * @allow (get, create, update, delete) if the request is made by the user with ID {userId}.
     * @deny (get, create, update, delete) if the request is made by a different user.
     * @principle Enforces strict user ownership for all operations.
     */
    match /users/{userId}/todos/{todoId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.resource.data.userId == userId && isSignedIn();
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures performance reports for a specific user, allowing only the owning user to manage their reports.
     * @path /users/{userId}/reports/{reportId}
     * @allow (get, create, update, delete) if the request is made by the user with ID {userId}.
     * @deny (get, create, update, delete) if the request is made by a different user.
     * @principle Enforces strict user ownership for all operations.
     */
    match /users/{userId}/reports/{reportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.resource.data.userId == userId && isSignedIn();
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures client leads, allowing public read access but disallowing any write operations.
     * @path /clientLeads/{leadId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) always.
     * @principle Provides public read access while restricting modifications.
     */
    match /clientLeads/{leadId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures marketing content, allowing public read access but disallowing any write operations.
     * @path /marketingContent/{contentId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) always.
     * @principle Provides public read access while restricting modifications.
     */
    match /marketingContent/{contentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures client records, allowing only authenticated users to read and write client data.
     * @path /clients/{clientId}
     * @allow (get, create, update, delete) to any signed-in user.
     * @deny (get, create, update, delete) to unsigned-in user.
     * @principle Allows public read access but restrict write access.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if resource != null && isSignedIn();
      allow delete: if resource != null && isSignedIn();
    }

    /**
     * @description Secures admin profiles, allowing only authenticated users to read and write admin data.
     * @path /admins/{adminId}
     * @allow (get, create, update, delete) to any signed-in user.
     * @deny (get, create, update, delete) to unsigned-in user.
     */
    match /admins/{adminId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if resource != null && isSignedIn();
      allow delete: if resource != null && isSignedIn();
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}