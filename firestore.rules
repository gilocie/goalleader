/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and shared access for chat messages.  It does not enforce the detailed schema of any documents.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profile data, only accessible by the user themselves.
 * - /messages/{messageId}: Stores all chat messages, accessible to participants.
 * - /chats/active: Singleton document tracking active chat IDs, publicly readable but only updatable by authenticated users
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent unauthorized access to user data.
 * - Chat messages implement a shared access model.
 *
 * Denormalization for Authorization:
 * - The `/messages/{messageId}` documents will need `senderId` and `recipientId` fields to easily authorize read/write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) User can only access their own profile.
     * @deny (list) Prevents listing all users.
     * @deny (create) User cannot create a profile for another user.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isSelfCreation(userId);
      allow get, update, delete: if isSignedIn() && isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Controls access to individual chat messages.
     * @path /messages/{messageId}
     * @allow (create) Any authenticated user can create a chat message.
     * @allow (get) Any authenticated user can read a chat message, if the userId is the senderId or recipientId.
     * @allow (update, delete) No one can update or delete messages.
     * @deny (list) No one can list messages.
     * @principle Enforces access control based on participation in the chat.
     */
    match /messages/{messageId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn() && isParticipant(request.auth.uid, resource.data.senderId, resource.data.recipientId);
      allow update, delete: if false;
      allow list: if false;
    }

        /**
         * @description Controls access to the singleton document that tracks active chat IDs.
         * @path /chats/active
         * @allow (get) Anyone can read the active chat IDs.
         * @allow (update) Authenticated users can update the active chat IDs.
         * @deny (create, delete) No one can create or delete this document.
         * @deny (list) No one can list any documents in the `/chats` collection.
         * @principle Provides public read access but restricts modification to authorized users.
         */
    match /chats/active {
      allow get: if true;
      allow update: if isSignedIn();
      allow create, delete: if false;
      allow list: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isSelfCreation(userId) {
      return request.auth.uid == userId;
    }

    function isParticipant(userId, senderId, recipientId) {
        return userId == senderId || userId == recipientId;
    }
  }
}