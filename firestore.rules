/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection. It enforces an ownership model
 * for user profiles and shared access control for chat messages.  The rules are designed
 * to be highly secure by default, restricting access unless explicitly granted.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores individual user profile data, accessible only to the user themselves.
 * - `/messages/{messageId}`: Stores all chat messages. Accessible to participants of a chat.
 * - `/chats/active`: Singleton document to track active chat IDs. Publicly readable.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; only the authenticated user can read/write their own profile.
 * - Listing of users is disallowed to prevent data scraping and privacy breaches.
 * - Chat message access is based on sender/recipient relationships.
 * - Anyone can read the active chats document.
 *
 * Denormalization for Authorization:
 * - The `/messages/{messageId}` documents rely on `senderId` and `recipientId` to determine access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, ensuring only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete their profile at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot read, update, or delete the profile at /users/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to chat messages based on sender/recipient relationships.
     * @path /messages/{messageId}
     * @allow (create) User with UID 'user_abc' can create a message with senderId 'user_abc' and recipientId 'user_xyz'.
     * @allow (get) User with UID 'user_abc' can read a message where they are either the sender or recipient.
     * @deny (create) User with UID 'user_abc' cannot create a message with senderId 'user_xyz' and recipientId 'user_pqr'.
     * @deny (get) User with UID 'user_abc' cannot read a message where they are neither the sender nor the recipient.
     * @principle Grants access to chat messages based on sender/recipient relationships.
     */
    match /messages/{messageId} {
      function isParticipant(message) {
        return request.auth.uid == message.senderId || request.auth.uid == message.recipientId;
      }

      function canWriteMessage() {
        return request.auth.uid == request.resource.data.senderId;
      }

      allow get: if isParticipant(resource.data);
      allow list: if request.auth.uid != null;
      allow create: if canWriteMessage();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to the active chats document.
     * @path /chats/active
     * @allow (get, list) Any user can read the active chats document.
     * @deny (create, update, delete) No one can modify the active chats document through client-side rules.
     * @principle Allows public read access to the active chats document.
     */
    match /chats/active {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}