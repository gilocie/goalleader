/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data,
 *              allows public read access to marketing content and client leads,
 *              and restricts admin profile management to authenticated admins.
 *
 * Data Structure:
 * - User profiles, to-do items, and reports are nested under /users/{userId}.
 * - Chat messages and calls are stored in top-level collections: /messages/{messageId} and /calls/{callId}.
 * - Client leads and marketing content are stored in top-level collections: /clientLeads/{leadId} and /marketingContent/{contentId}.
 * - Client data is stored under /clients/{clientId}.
 * - Admin profiles are stored under /admins/{adminId}.
 *
 * Key Security Decisions:
 * - Users can only read, create, update, and delete their own profiles, to-do items, and reports.
 * - Listing all users is disallowed to prevent unauthorized data access (addressed from the prompt).
 * - Client leads and marketing content are publicly readable but only updatable by authenticated users.
 * - Admin profiles can only be created and modified by other authenticated admins.
 *
 * Denormalization for Authorization:
 * - To-do items and reports denormalize the `userId` field, which is validated against the path to ensure ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents unauthorized access and enforces data ownership.
     * @path /users
     * @allow (create) A user can create their own profile.
     * @deny (list) Listing all users is disallowed to prevent unauthorized data access.
     * @deny (update, delete) A user cannot modify or delete another user's profile.
     * @principle Enforces user ownership and prevents unauthorized data access.
     */
    match /users/{userId} {
      // Prevent listing all users
      allow list: if false;
      allow get: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read messages, but doesn't allow creates, updates, or deletes by anyone.
     * @path /messages/{messageId}
     * @allow (get, list) Any user can read any messages.
     * @deny (create, update, delete) No one can create, update, or delete messages.
     * @principle Allows public read access.
     */
    match /messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read calls, but doesn't allow creates, updates, or deletes by anyone.
     * @path /calls/{callId}
     * @allow (get, list) Any user can read any call records.
     * @deny (create, update, delete) No one can create, update, or delete call records.
     * @principle Allows public read access for call records.
     */
    match /calls/{callId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read/write their own active chat ids.
     * @path /chats/{userId}
     * @allow (get, create, update, delete, list) A user can read, create, update, delete and list their own active chats.
     * @deny None.
     * @principle Enforces user ownership.
     */
    match /chats/{userId} {
      allow get, create, update, delete, list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-specific to-do item ownership.
     * @path /users/{userId}/todos/{todoId}
     * @allow (create) A user can create a to-do item under their own user ID.
     * @allow (get, list) A user can read their own to-do items.
     * @deny (update, delete) A user cannot modify or delete another user's to-do items.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/todos/{todoId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Enforces user-specific report ownership.
     * @path /users/{userId}/reports/{reportId}
     * @allow (create) A user can create a report under their own user ID.
     * @allow (get, list) A user can read their own reports.
     * @deny (update, delete) A user cannot modify or delete another user's reports.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/reports/{reportId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
    }

     /**
      * @description Allows anyone to read client leads, but only authenticated users can create, update or delete them.
      * @path /clientLeads/{leadId}
      * @allow (get, list) Any user can read any client leads.
      * @allow (create, update, delete) Only authenticated users can create, update, or delete client leads.
      */
    match /clientLeads/{leadId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read marketing content, but only authenticated users can create, update, or delete it.
     * @path /marketingContent/{contentId}
     * @allow (get, list) Any user can read any marketing content.
     * @allow (create, update, delete) Only authenticated users can create, update, or delete marketing content.
     */
    match /marketingContent/{contentId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows management of client data.
     * @path /clients/{clientId}
     */
    match /clients/{clientId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows management of admin profiles.
     * @path /admins/{adminId}
     * @allow (get, create, update, delete, list) Only authenticated admins can manage admin profiles.
     */
    match /admins/{adminId} {
      allow get, create, update, delete, list: if isSignedIn();
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}