/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset prioritizes user privacy and data ownership. Users can only read and write their own profile data. Chat messages can only be created, but not updated or deleted.
 * @data_structure
 *   - /users/{userId}: Stores individual user profiles.
 *   - /messages/{messageId}: Stores all chat messages.
 *   - /chats/active: Singleton document to track active chat IDs.
 * @key_security_decisions
 *   - Users can only read and write their own user profile.
 *   - Chat messages can be created by anyone, representing a public chat. Updates and deletes are forbidden.
 *   - The list of active chat IDs is publicly readable and writable. This is potentially insecure and should be reviewed.
 * @denormalization_for_authorization N/A - No denormalization is used in this ruleset.
 * @structural_segregation N/A - No structural segregation is used in this ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (read, write) if the user is the owner of the profile.
     * @deny (read, write) if the user is not the owner of the profile.
     *   e.g., request.auth.uid = 'otherUser'
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat messages. Messages can be created by anyone, but not updated or deleted.
     * @path /messages/{messageId}
     * @allow (create) any authenticated user can create a message.
     *   e.g., request.auth.uid = 'user_abc'
     * @deny (update, delete) no one can update or delete a message.
     *   e.g., request.auth.uid = 'user_abc'
     * @principle Allows public creation of messages, but restricts updates and deletions.
     */
    match /messages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to the list of active chat IDs. This document is publicly readable and writable.
     * @path /chats/active
     * @allow (read, write) anyone can read and write the active chat IDs.
     * @principle Allows public read and write access to active chat IDs.
     */
    match /chats/active {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}