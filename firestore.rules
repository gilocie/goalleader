/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles and shared access to chat messages based on sender and recipient IDs. It prevents listing of all users.
 * @data_structure
 *   - /users/{userId}: Stores individual user profile data. Only the user can read/write their own profile.
 *   - /messages/{messageId}: Stores all chat messages. Read/write access is based on sender/recipient relationships.
 *   - /chats/active: Singleton document tracking active chat IDs. Currently allows public read access and no write access.
 * @key_security_decisions
 *   - Listing all users is explicitly denied to protect user privacy.
 *   - Read and write access to chat messages is limited to the sender and recipient.
 *   - The `/chats/active` document is readable by all but cannot be modified.
 * @denormalization_for_authorization N/A
 * @structural_segregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data. Only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, get, delete) - Authenticated user with matching userId.
     * @deny (create, update, get, delete) - Any other user trying to access this profile.
     * @deny list - Listing of all users is prohibited.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to chat messages. Only the sender or recipient can read a message.
     * @path /messages/{messageId}
     * @allow (get) - Sender or recipient of the message.
     * @allow (create) - Authenticated user.
     * @allow (update, delete) - Sender of the message.
     * @deny list - No listing of all messages.
     * @principle Shared access based on sender and recipient IDs.
     */
    match /messages/{messageId} {
      allow get: if isSenderOrRecipient(request.auth.uid, resource.data.senderId, resource.data.recipientId);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSender(request.auth.uid, resource.data.senderId) && resource != null;
      allow delete: if isSender(request.auth.uid, resource.data.senderId) && resource != null;
    }

    /**
     * @description Controls access to active chat IDs.
     * @path /chats/active
     * @allow get, list: Public read access to all active chat IDs.
     * @deny create, update, delete: No modifications allowed.
     * @principle Public read with owner-only writes.
     */
    match /chats/active {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isSenderOrRecipient(userId, senderId, recipientId) {
      return userId == senderId || userId == recipientId;
    }

    function isSender(userId, senderId) {
      return userId == senderId;
    }
  }
}