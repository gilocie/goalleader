/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data, ensuring users can only access their own resources.
 * It allows public read access to user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible for reading by any user, but writable only by the owner.
 * - /messages/{messageId}: Stores chat messages. Accessible for reading by any user, but only the sender can create. Only the sender and recipient can update message status. Only the sender can delete messages.
 * - /calls/{callId}: Represents a voice or video call. Accessible to participants only.
 * - /chats/{userId}: Tracks active chat IDs for each user, accessible and writable only by the owner.
 * - /users/{userId}/todos/{todoId}: Stores to-do items for each user, accessible and writable only by the owner.
 * - /users/{userId}/reports/{reportId}: Stores performance reports for each user, accessible and writable only by the owner.
 * - /clientLeads/{leadId}: Stores client leads for the organization, accessible to any authenticated user.
 * - /marketingContent/{contentId}: Stores marketing content for the organization, accessible to any authenticated user.
 *
 * Key Security Decisions:
 * - User listing is explicitly allowed to display user profiles.
 * - Users have full CRUD access only to data under their own /users/{userId} subcollection.
 * - Active chats, to-do items and reports are secured under the owner's user ID.
 * - The `calls` collection is readable/writable only by the two participants of the call.
 *
 * Denormalization for Authorization:
 * - To-Do and Report documents denormalize the `userId` to simplify ownership checks.
 * - Call documents contain a `participantIds` array to simplify list queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isParticipant(callId) {
        return request.auth.uid in get(/databases/$(database)/documents/calls/$(callId)).data.participantIds;
    }

    match /users/{userId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId);
    }

    match /messages/{messageId} {
      allow read, write: if isSignedIn();
    }
    
    match /calls/{callId} {
      // Allow list operations if the user is a participant in the calls being queried.
      // This is crucial for the call listeners in the app.
      allow list: if isSignedIn() && request.auth.uid in request.query.filters[0].value;
      allow get, update, delete: if isSignedIn() && isParticipant(callId);
      allow create: if isSignedIn() && request.resource.data.callerId == request.auth.uid;

      match /iceCandidates/{candidateId} {
        allow read, create: if isSignedIn() && isParticipant(callId);
      }
    }

    match /chats/{userId} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }

    match /users/{userId}/todos/{todoId} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }

    match /users/{userId}/reports/{reportId} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }

    match /clientLeads/{leadId} {
      allow read, write: if isSignedIn();
    }

    match /marketingContent/{contentId} {
      allow read, write: if isSignedIn();
    }
    
    match /admins/{adminId} {
      allow read: if isSignedIn();
      // Write access should be highly restricted, e.g., only by other admins or a trusted server process.
      // For this app, we'll allow any authenticated user to register an admin for simplicity,
      // but in production, this would be locked down.
      allow write: if isSignedIn();
    }
  }
}
