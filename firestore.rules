rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // -------------------- USERS --------------------
    match /users/{userId} {
      // Anyone (signed in or not) can read/list users
      allow get, list: if true;

      // Only owner can create their profile
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Only owner can update profile; ID cannot change
      allow update: if isSignedIn() && isExistingOwner(userId) &&
        request.resource.data.id == resource.data.id;

      // Only owner can delete profile
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // -------------------- MESSAGES --------------------
    match /messages/{messageId} {
      // Any user can read messages
      allow get, list: if true;

      // Only sender can create a message
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;

      // Sender can edit content; sender or recipient can update readStatus or soft-delete flags
      allow update: if isSignedIn() &&
        (
          // Sender editing content
          (request.auth.uid == resource.data.senderId &&
            request.resource.data.keys().hasOnly(['content','readStatus','deletedBySender','deletedByRecipient'])) ||
          // Sender or recipient updating readStatus or soft-delete flags only
          ((request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.recipientId) &&
            request.resource.data.keys().hasOnly(['readStatus','deletedBySender','deletedByRecipient']))
        );

      // Only sender can fully delete a message for everyone
      allow delete: if isSignedIn() && request.auth.uid == resource.data.senderId;
    }

    // -------------------- ACTIVE CHATS --------------------
    match /chats/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // -------------------- HELPER FUNCTIONS --------------------
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}
