/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization while permitting flexible data shapes
 * to enable rapid prototyping. It strictly enforces user-based access control
 * for private data and allows public read access where appropriate. Schema
 * validation is minimized to facilitate agile development.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /messages/{messageId}: Stores chat messages, accessible for reading and writing
 *   only by the sender or recipient.
 * - /chats/{userId}: Tracks active chat IDs for each user, only accessible to that user.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent information disclosure.
 * - `messages` and `chats` collections enforce sender/receiver access only.
 * - The rules explicitly deny any write operations with `if false` when no
 *   specific access is granted. This ensures a secure default posture.
 *
 * Denormalization for Authorization:
 * - The `/messages/{messageId}` documents use the `senderId` and `recipientId`
 *   fields to directly enforce access control, avoiding the need for complex
 *   lookups or separate membership collections.
 *   This allows for efficient and secure rules that scale well.
 *
 * Structural Segregation:
 * - The decision to store user profiles under `/users/{userId}` provides a clear
 *   separation between public and private data. This enables easier access
 *   control and prevents accidental exposure of sensitive information.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, accessible only by the owning user.
     * @path /users/{userId}
     * @allow (create) - User 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User 'user_abc' can read, update, or delete their profile if request.auth.uid == 'user_abc'.
     * @deny (create) - User 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (get, update, delete) - User 'user_xyz' cannot read, update, or delete profile 'user_abc'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure chat messages, accessible only to the sender or recipient.
     * @path /messages/{messageId}
     * @allow (create) - Any authenticated user can create a message.
     * @allow (get) - User 'user_abc' can read message 'message_123' if they are the sender or recipient.
     * @allow (update) - User 'user_abc' can update message 'message_123' if they are the sender or recipient.
     * @allow (delete) - User 'user_abc' can delete message 'message_123' if they are the sender or recipient.
     * @deny (get, update, delete) - User 'user_xyz' cannot read, update, or delete message 'message_123' if they are not the sender or recipient.
     * @principle Enforces sender/recipient access for all operations on chat messages.
     */
    match /messages/{messageId} {
      function isSenderOrRecipient(resource) {
        return resource.data.senderId == request.auth.uid
            || resource.data.recipientId == request.auth.uid;
      }

      function isExistingSenderOrRecipient(resource) {
        return resource != null && isSenderOrRecipient(resource);
      }

      allow get: if true;
      allow list: if false;
      allow create: if request.auth != null;
      allow update: if isExistingSenderOrRecipient(resource);
      allow delete: if isExistingSenderOrRecipient(resource);
    }

    /**
     * @description Secure active chat lists, accessible only to the owning user.
     * @path /chats/{userId}
     * @allow (create) - User 'user_abc' can create their active chat list if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User 'user_abc' can read, update, or delete their active chat list if request.auth.uid == 'user_abc'.
     * @deny (create) - User 'user_xyz' cannot create an active chat list with ID 'user_abc'.
     * @deny (get, update, delete) - User 'user_xyz' cannot read, update, or delete active chat list 'user_abc'.
     * @principle Enforces document ownership for all operations on active chat lists.
     */
    match /chats/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}