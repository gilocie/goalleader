/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and active chats. It allows public read access to messages, but restricts message creation and updates to authorized users only.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profile data, secured with owner-only access.
 * - /messages/{messageId}: Stores all chat messages, publicly readable but with restricted writes.
 * - /chats/{userId}: Stores active chat IDs for a user, secured with owner-only access.
 *
 * Key Security Decisions:
 * - Users can read all profiles.
 * - Messages are publicly readable, enabling open access to chat history, but creating messages is limited to the sender.
 * - Active chats are owned and managed only by the associated user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, list) Any user can read profiles.
     * @allow (create) Authenticated user 'user_abc' can create their profile if request.auth.uid == 'user_abc' and request.resource.data.id == 'user_abc'.
     * @allow (update) Authenticated user 'user_abc' can update their profile if they own it and the ID doesn't change.
     * @allow (delete) Authenticated user 'user_abc' can delete their profile if they own it.
     * @deny (create) User 'user_def' cannot create a profile with ID 'user_abc'.
     * @deny (update) User 'user_abc' cannot update another user's profile.
     * @deny (delete) User 'user_abc' cannot delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat message documents.
     * @path /messages/{messageId}
     * @allow (get, list) Any user can read messages.
     * @allow (create) Authenticated user 'user_abc' can create a message if request.auth.uid == request.resource.data.senderId.
     * @allow (update) Authenticated user 'user_abc' can update the 'readStatus' field if they are the sender or recipient.
     * @deny (create) User 'user_abc' cannot create a message with a different sender ID.
     * @deny (update) User 'user_abc' cannot update messages where they are not the sender or recipient.
     * @deny (delete) No one can delete messages.
     * @principle Allows public read access while restricting writes to authorized users.
     */
    match /messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;
      allow update: if isSignedIn() &&
        (resource.data.senderId == request.auth.uid || resource.data.recipientId == request.auth.uid) &&
        request.resource.data.readStatus is string &&
        request.resource.data.senderId == resource.data.senderId &&
        request.resource.data.recipientId == resource.data.recipientId &&
        request.resource.data.content == resource.data.content &&
        request.resource.data.type == resource.data.type;
      allow delete: if false;
    }

    /**
     * @description Controls access to active chat documents.
     * @path /chats/{userId}
     * @allow (get, list) Authenticated user 'user_abc' can read their own active chats.
     * @allow (create) Authenticated user 'user_abc' can create their own active chats.
     * @allow (update) Authenticated user 'user_abc' can update their own active chats.
     * @allow (delete) Authenticated user 'user_abc' can delete their own active chats.
     * @deny (get, list) User 'user_def' cannot read user 'user_abc' active chats.
     * @deny (create) User 'user_def' cannot create active chats for user 'user_abc'.
     * @deny (update) User 'user_def' cannot update active chats for user 'user_abc'.
     * @deny (delete) User 'user_def' cannot delete active chats for user 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /chats/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}