/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization based on user identity and relationships
 * while remaining flexible on data shapes to facilitate rapid prototyping.
 * It enforces user-ownership for profiles and active chats and sender-ownership for
 * messages. Data validation is minimized.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user.
 * - /messages/{messageId}: Stores chat messages. Accessible for read to all,
 *   but create is restricted to authenticated senders, and update/delete are
 *   limited to the sender and/or recipient based on specific conditions.
 * - /chats/{userId}: Tracks active chat IDs for a user, only accessible to the user.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles and active chats.
 * - Messages can be read by anyone, but creation, updates, and deletes are restricted.
 * - Data validation is minimized to essential authorization checks.
 *
 * Denormalization for Authorization:
 * - /messages/{messageId} relies on denormalized senderId and recipientId fields
 *   to enforce access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // -------------------- USERS --------------------
    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (get, list) Any user can read profiles.
     * @allow (create) Authenticated user with matching ID can create their profile.
     * @allow (update) Authenticated owner can update their profile.
     * @allow (delete) Authenticated owner can delete their profile.
     * @deny (create) Unauthenticated user cannot create a profile.
     * @deny (create) Authenticated user with mismatched ID cannot create a profile.
     * @deny (update) Unauthenticated user cannot update a profile.
     * @deny (update) Owner cannot change their ID.
     * @deny (delete) Unauthenticated user cannot delete a profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Any user can read profiles
      allow get, list: if true;

      // Only owner can create their profile
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Only owner can update profile; ID cannot change
      allow update: if isSignedIn() && isExistingOwner(userId) &&
        request.resource.data.id == resource.data.id;

      // Only owner can delete profile
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // -------------------- MESSAGES --------------------
    /**
     * @description Manages chat messages.
     * @path /messages/{messageId}
     * @allow (get, list) Any user can read messages.
     * @allow (create) Authenticated sender can create a message.
     * @allow (update) Authenticated sender or recipient can update read status or soft-delete flags.
     * @allow (delete) Authenticated sender can fully delete a message.
     * @deny (create) Unauthenticated user cannot create a message.
     * @deny (update) Unauthenticated user cannot update a message.
     * @deny (update) User who is neither sender nor recipient cannot update a message.
     * @deny (update) User cannot update other fields than readStatus, deletedBySender, and deletedByRecipient.
     * @deny (delete) Unauthenticated user cannot delete a message.
     * @deny (delete) User who is not the sender cannot fully delete a message.
     * @principle Enforces sender-based ownership and read access for all messages.
     */
    match /messages/{messageId} {
      // Any user can read messages
      allow get, list: if true;

      // Only sender can create a message
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;

      // Only sender or recipient can update readStatus or soft-delete flags
      allow update: if isSignedIn() &&
        (resource.data.senderId == request.auth.uid || resource.data.recipientId == request.auth.uid) &&
        request.resource.data.keys().hasOnly([
          'readStatus',
          'deletedBySender',
          'deletedByRecipient'
        ]) && resource != null;

      // Only sender can fully delete a message for everyone
      allow delete: if isSignedIn() && request.auth.uid == resource.data.senderId && resource != null;
    }

    // -------------------- ACTIVE CHATS --------------------
    /**
     * @description Manages active chat IDs for a user.
     * @path /chats/{userId}
     * @allow (get, list) Authenticated owner can read their active chats.
     * @allow (create) Authenticated owner can create their active chats.
     * @allow (update) Authenticated owner can update their active chats.
     * @allow (delete) Authenticated owner can delete their active chats.
     * @deny (create) Unauthenticated user cannot create active chats.
     * @deny (create) Authenticated user with mismatched ID cannot create active chats.
     * @deny (update) Unauthenticated user cannot update active chats.
     * @deny (delete) Unauthenticated user cannot delete active chats.
     * @principle Enforces document ownership for active chats.
     */
    match /chats/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // -------------------- HELPER FUNCTIONS --------------------
    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}