/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and their associated data (todos).
 * Authenticated users can read and list user profiles. Only the owner of a profile can create, update, or delete it.
 * Chat messages are publicly readable, but writes are denied.  Active Chats are only accessible to its owner
 *
 * @dataStructure
 * - `/users/{userId}`: User profile data.
 * - `/messages/{messageId}`: Chat messages (publicly readable).
 * - `/chats/{userId}`: Active chat IDs for each user.
 * - `/users/{userId}/todos/{todoId}`: To-do items for a specific user.
 *
 * @keySecurityDecisions
 * - Users can list all user profiles, but only read their own.
 * - Chat messages are readable by everyone.
 * - To-do items are strictly owned by the user; no shared access.
 * - Unauthenticated access is entirely denied, except for reading chat messages.
 *
 * @denormalizationForAuthorization
 * - The `todo` documents at `/users/{userId}/todos/{todoId}` have a `userId` field which is validated to match the parent path.
 *
 * @structuralSegregation
 * - User profiles and their todos are stored under the `/users/{userId}` collection to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, list): Authenticated users can read and list all user profiles.
     * @allow (create): A user can create their own profile if the userId matches their auth UID.
     * @allow (update, delete): Only the user who owns the profile can update or delete it.
     * @deny (create): A user cannot create a profile with a different userId than their auth UID.
     * @deny (update, delete): A user cannot update or delete another user's profile.
     * @principle Enforces document ownership for writes; allows public reads for authenticated users.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if request.auth.uid == userId;
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat messages.  Messages are currently globally readable.
     * @path /messages/{messageId}
     * @allow (get, list): Anyone can read chat messages.
     * @deny (create, update, delete): No one can create, update, or delete chat messages through security rules.
     * @principle Allows public reads, but restricts writes for prototyping.
     */
    match /messages/{messageId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to active chat IDs for a user.
     * @path /chats/{userId}
     * @allow (get, list): Only the owner can read active chats.
     * @allow (create): A user can create their own active chat document if the userId matches their auth UID.
     * @allow (update, delete): Only the user who owns the active chat can update or delete it.
     * @deny (create): A user cannot create an active chat document with a different userId than their auth UID.
     * @deny (update, delete): A user cannot update or delete another user's active chat document.
     * @principle Enforces document ownership.
     */
    match /chats/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to to-do items for a specific user.
     * @path /users/{userId}/todos/{todoId}
     * @allow (get, list): Only the owner of the user profile can read their to-do items.
     * @allow (create): Only the owner can create to-do items under their profile and the userId is consistent.
     * @allow (update, delete): Only the owner can update or delete their own to-do items, and the document must exist.
     * @deny (create): A user cannot create to-do items for another user.
     * @deny (update, delete): A user cannot update or delete another user's to-do items.
     * @principle Enforces strict user ownership for all operations.  Validates relational integrity between the todo document and the user.
     */
    match /users/{userId}/todos/{todoId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}