/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and skipping data validation.
 * It enforces a strict user-ownership model for user profiles and public read access for chat messages.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profile data. Access is restricted to the user themselves.
 * - /messages/{messageId}: Stores all chat messages. Public read access is granted, but write access is denied.
 * - /chats/active: Singleton document to track active chat IDs.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Chat messages are publicly readable.
 * - Data validation is skipped to allow for flexible schema changes during prototyping.
 * - No user listing is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User 'nZCmcICE21gjQuh9Qn0c74keBPF2' can create their own profile.
     * @deny (create) User ' অন্যuser' cannot create profile for 'nZCmcICE21gjQuh9Qn0c74keBPF2'.
     * @allow (get) User 'nZCmcICE21gjQuh9Qn0c74keBPF2' can read their own profile.
     * @deny (get) User ' অন্যuser' cannot read profile for 'nZCmcICE21gjQuh9Qn0c74keBPF2'.
     * @allow (update) User 'nZCmcICE21gjQuh9Qn0c74keBPF2' can update their own profile.
     * @deny (update) User ' অন্যuser' cannot update profile for 'nZCmcICE21gjQuh9Qn0c74keBPF2'.
     * @allow (delete) User 'nZCmcICE21gjQuh9Qn0c74keBPF2' can delete their own profile.
     * @deny (delete) User ' অন্যuser' cannot delete profile for 'nZCmcICE21gjQuh9Qn0c74keBPF2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat message documents.
     * @path /messages/{messageId}
     * @allow (get) Any user can read any message.
     * @allow (list) Any user can list messages.
     * @deny (create) No user can create a message directly via Firestore (messages should be created by backend).
     * @deny (update) No user can update messages.
     * @deny (delete) No user can delete messages.
     */
    match /messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

      /**
       * @description Controls access to the active chats singleton document.
       * @path /chats/active
       */
    match /chats/active {
        allow get: if true;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}