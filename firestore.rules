/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for profiles and chats,
 * while allowing public read access to messages. Message creation is
 * restricted to the sender, and read status updates are allowed by either
 * the sender or the recipient.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, owned by the user.
 * - /messages/{messageId}: Stores chat messages, readable by all, but writable only by the sender.
 * - /chats/{userId}: Stores active chat IDs for a user, owned by the user.
 *
 * Key Security Decisions:
 * - Public message read access is allowed.
 * - Only the sender or recipient can update the read status of a message.
 * - Message deletion is disallowed.
 * - The 'id' field in /users/{userId} is validated for consistency on create and immutability on update.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, list) Any user can get and list users
     * @allow (create) User can create their own profile if authenticated.
     * @allow (update) User can update their own profile if authenticated and document exists.
     * @allow (delete) User can delete their own profile if authenticated and document exists.
     * @deny (create) User cannot create a profile with an ID that doesn't match their auth UID.
     * @deny (update) User cannot update the 'id' field to a different value.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat messages.
     * @path /messages/{messageId}
     * @allow (get, list) Any user can read any message.
     * @allow (create) Only the sender can create a message.
     * @allow (update) Only the sender or recipient can update the readStatus.
     * @deny (create) Only authenticated users can create messages.
     * @deny (update) Users cannot modify any other fields except readStatus.
     * @deny (delete) No one can delete messages.
     * @principle Allows public reads but restricts writes to authorized users.
     */
    match /messages/{messageId} {
      // Any user can read messages
      allow get, list: if true;

      // Only sender can create a message
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;

      // Allow update ONLY for `readStatus` by sender or recipient
      allow update: if isSignedIn() &&
        (resource.data.senderId == request.auth.uid || resource.data.recipientId == request.auth.uid) &&
        request.resource.data.keys().hasOnly(['readStatus']);

      // No deletes allowed
      allow delete: if false;
    }

    /**
     * @description Controls access to active chat documents.
     * @path /chats/{userId}
     * @allow (get, list) User can get and list their own active chats if authenticated.
     * @allow (create) User can create their own active chats if authenticated.
     * @allow (update) User can update their own active chats if authenticated and document exists.
     * @allow (delete) User can delete their own active chats if authenticated and document exists.
     * @deny (create) User cannot create active chats for another user.
     * @deny (update) User cannot update active chats for another user or change the user ID.
     * @deny (delete) User cannot delete active chats for another user.
     * @principle Enforces document ownership for active chats.
     */
    match /chats/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // -------------------- HELPER FUNCTIONS --------------------
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}