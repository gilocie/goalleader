/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data, while allowing public read access to chat messages.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}` and are only accessible to the owning user.
 * - Chat messages are stored under `/messages/{messageId}` and are publicly readable.
 * - Active chat IDs are stored under `/chats/{userId}` and are only accessible to the owning user.
 * - To-do items are stored under `/users/{userId}/todos/{todoId}` and are only accessible to the owning user.
 * - Reports are stored under `/users/{userId}/reports/{reportId}` and are only accessible to the owning user.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Chat messages are publicly readable to enable open communication, but modification requires authentication.
 *
 * Denormalization for Authorization:
 * - For to-dos and reports, the `userId` is denormalized into the document to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user profile data.
     * @path /users/{userId}
     * @allow (create) - If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list) - If the user ID in the path matches the authenticated user's ID.
     * @allow (update, delete) - If the user ID in the path matches the authenticated user's ID and the document exists.
     * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, list) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (update, delete) - If the user ID in the path does not match the authenticated user's ID or the document doesn't exist.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disallowing user listing

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to chat messages, but only authenticated users can create, update, or delete messages.
     * @path /messages/{messageId}
     * @allow (get, list) - Anyone can read chat messages.
     * @allow (create) - Only authenticated users can create chat messages.
     * @allow (update) - Only authenticated users can update chat messages and the document exists.
     * @allow (delete) - Only authenticated users can delete chat messages and the document exists.
     * @deny (create) - If the user is not authenticated.
     * @deny (update) - If the user is not authenticated or the document doesn't exist.
     * @deny (delete) - If the user is not authenticated or the document doesn't exist.
     * @principle Allows public reads with authentication required for writes.
     */
    match /messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to active chat IDs for a specific user.
     * @path /chats/{userId}
     * @allow (create) - If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list) - If the user ID in the path matches the authenticated user's ID.
     * @allow (update, delete) - If the user ID in the path matches the authenticated user's ID and the document exists.
     * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, list) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (update, delete) - If the user ID in the path does not match the authenticated user's ID or the document doesn't exist.
     * @principle Enforces document ownership for writes.
     */
    match /chats/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to to-do items for a specific user.
     * @path /users/{userId}/todos/{todoId}
     * @allow (create) - If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list) - If the user ID in the path matches the authenticated user's ID.
     * @allow (update, delete) - If the user ID in the path matches the authenticated user's ID and the document exists.
     * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, list) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (update, delete) - If the user ID in the path does not match the authenticated user's ID or the document doesn't exist.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/todos/{todoId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Allows access to performance reports for a specific user.
     * @path /users/{userId}/reports/{reportId}
     * @allow (create) - If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list) - If the user ID in the path matches the authenticated user's ID.
     * @allow (update, delete) - If the user ID in the path matches the authenticated user's ID and the document exists.
     * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, list) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (update, delete) - If the user ID in the path does not match the authenticated user's ID or the document doesn't exist.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/reports/{reportId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }
  }
}