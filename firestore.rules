/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles
 * and shared access for chat messages.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profile data. Access is restricted to the owner.
 * - /messages/{messageId}: Stores all chat messages.
 * - /chats/active: Singleton document to track active chat IDs. Limited write access.
 *
 * Key Security Decisions:
 * - Prevents listing all user profiles to prevent information disclosure.
 * - Access to user profiles is restricted to the authenticated user (owner).
 * - Assumes messages collection is public.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces document ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get) - Authenticated user can read their own profile.
     * @deny (create) - User attempts to create a profile with a different userId.
     * @deny (update) - User attempts to update a profile they don't own.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && (isOwner(userId) || resource.data.isPublic == true);
      allow list: if isSignedIn();  // allows listing only for signed-in users
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Allows public read access to messages, restricts write access.
     * @path /messages/{messageId}
     * @allow (get, list) - Any user can read all messages.
     * @deny (create, update, delete) - No one can create, update, or delete messages without additional checks (TODO).
     * @principle Public read access with owner-only writes.
     */
    match /messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
      * @description Allows limited access to the active chats singleton document.
      * @path /chats/active
      * @allow (get) - Any user can read the active chats.
      * @deny (create, update, delete) - No one can create, update, or delete active chats.
      */
     match /chats/active {
        allow get: if true;
        allow create, update, delete: if false;
     }
  }
}