/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-centric security model for a chat application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the owning user.
 * - /messages/{messageId}: Stores chat messages.  Access is based on sender/recipient.
 * - /chats/{userId}: Stores active chat IDs for each user. Access is restricted to the owning user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Chat message read/write access is restricted to the sender or recipient of the message.
 * - Users can only read and write their own active chat list.
 * - All data validation is skipped in prototyping mode with the exception of authorization-critical
 *   fields.
 *
 * Denormalization for Authorization:
 * - The security rules rely on the `senderId` and `recipientId` fields within each `/messages/{messageId}` document
 *   to determine read and write access. This avoids needing to perform costly and complex queries
 *   to other collections (e.g., a hypothetical `/conversations` collection) during authorization.
 *   By denormalizing the sender/recipient relationship directly onto the message document, the
 *   rules can efficiently enforce that only the involved parties can access the message.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their profile.
     * @deny (create) - User with UID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat messages.
     * @path /messages/{messageId}
     * @allow (create) - A user can create a message if they are the sender or recipient.
     * @allow (get) - A user can get a message if they are the sender or recipient.
     * @allow (update) - A user can update a message if they are the sender or recipient.
     * @deny (create) - A user cannot create a message for someone else.
     * @deny (get) - A user cannot read a message if they are not the sender or recipient.
     * @principle Enforces sender/recipient-based access control.
     */
    match /messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSenderOrRecipient(message) {
        return isSignedIn() && (request.auth.uid == message.senderId || request.auth.uid == message.recipientId);
      }

        // NOTE: The resource variable is only available on get, update, and delete.
      allow get: if isSenderOrRecipient(resource.data);
      allow list: if false;
      allow create: if isSignedIn() && (request.resource.data.senderId == request.auth.uid || request.resource.data.recipientId == request.auth.uid);
      allow update: if resource != null && isSenderOrRecipient(resource.data);
      allow delete: if false;
    }

    /**
     * @description Controls access to active chat lists for users.
     * @path /chats/{userId}
     * @allow (create) - User with UID 'user123' can create their chat list if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their chat list.
     * @deny (create) - User with UID 'user456' cannot create a chat list with ID 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /chats/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }
}