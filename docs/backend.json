
{
  "entities": {
    "userProfile": {
      "title": "User Profile",
      "description": "Represents a user's profile information.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The user's full name."
        },
        "role": {
          "type": "string",
          "description": "The user's role in the organization."
        },
        "department": {
          "type": "string",
          "description": "The department the user belongs to."
        },
        "status": {
          "type": "string",
          "description": "The user's current status (e.g., 'online', 'offline', 'last seen...')."
        },
        "country": {
            "type": "string",
            "description": "The country the user is located in."
        },
        "branch": {
            "type": "string",
            "description": "The specific branch or office the user works from."
        }
      },
      "required": ["name", "role", "department", "status"]
    },
    "chatMessage": {
      "title": "Chat Message",
      "description": "Represents a single message in a chat conversation.",
      "type": "object",
      "properties": {
        "senderId": {
          "type": "string"
        },
        "recipientId": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "readStatus": {
          "type": "string",
          "enum": ["sent", "delivered", "read"]
        },
        "isSystem": {
            "type": "boolean"
        },
        "type": {
            "type": "string",
            "enum": ["text", "audio", "image", "file"]
        },
        "audioUrl": { "type": "string" },
        "audioDuration": { "type": "number" },
        "imageUrls": {
            "type": "array",
            "items": { "type": "string" }
        },
        "fileName": { "type": "string" },
        "fileUrl": { "type": "string" },
        "replyTo": { "type": "string" },
        "callType": {
            "type": "string",
            "enum": ["video", "voice"]
        }
      },
      "required": ["senderId", "recipientId", "content", "timestamp", "type"]
    },
    "call": {
      "title": "Call Record",
      "description": "Represents a voice or video call.",
      "type": "object",
      "properties": {
        "callerId": { "type": "string" },
        "recipientId": { "type": "string" },
        "status": { "type": "string", "enum": ["ringing", "active", "ended", "declined", "missed"] },
        "type": { "type": "string", "enum": ["voice", "video"] },
        "createdAt": { "type": "string", "format": "date-time" },
        "endedAt": { "type": "string", "format": "date-time" }
      },
      "required": ["callerId", "recipientId", "status", "type", "createdAt"]
    },
    "activeChats": {
        "title": "Active Chats",
        "description": "A document to track which chat conversations are active.",
        "type": "object",
        "properties": {
            "ids": {
                "type": "array",
                "items": { "type": "string" }
            }
        },
        "required": ["ids"]
    },
    "todo": {
      "title": "To-Do Item",
      "description": "Represents a single to-do item or task for a user.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name or title of the task."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the task."
        },
        "status": {
          "type": "string",
          "enum": ["Pending", "In Progress", "Completed"]
        },
        "dueDate": {
          "type": "string",
          "format": "date"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "type": "number",
          "description": "The duration of the task in seconds."
        },
        "userId": {
          "type": "string",
          "description": "The ID of the user who owns this task."
        }
      },
      "required": ["name", "status", "dueDate", "userId"]
    },
    "report": {
        "title": "Performance Report",
        "description": "A performance report generated by a user.",
        "type": "object",
        "properties": {
            "title": {
                "type": "string",
                "description": "The title of the report."
            },
            "content": {
                "type": "string",
                "description": "The full content of the report."
            },
            "date": {
                "type": "string",
                "format": "date-time",
                "description": "The date the report was created."
            },
            "userId": {
                "type": "string",
                "description": "The ID of the user who created this report."
            }
        },
        "required": ["title", "content", "date", "userId"]
    },
    "clientLead": {
        "title": "Client Lead",
        "description": "Represents a single prospective client.",
        "type": "object",
        "properties": {
            "name": { "type": "string" },
            "company": { "type": "string" },
            "email": { "type": "string" },
            "phone": { "type": "string" },
            "service": { "type": "string" },
            "status": { "type": "string", "enum": ["New", "Contacted", "Qualified", "Proposal Sent", "Negotiation", "Won", "Lost"] }
        },
        "required": ["name", "company", "email", "phone", "service", "status"]
    },
    "marketingContent": {
        "title": "Marketing Content",
        "description": "Represents an AI-generated and approved piece of marketing content.",
        "type": "object",
        "properties": {
            "blogTitle": { "type": "string" },
            "blogOutline": { "type": "string" },
            "socialMediaPost": { "type": "string" },
            "emailSubject": { "type": "string" },
            "scheduledAt": { "type": "string", "format": "date-time" },
            "recipients": { "type": "array", "items": { "type": "string" } },
            "approvedAt": { "type": "string", "format": "date-time" }
        },
        "required": ["blogTitle", "blogOutline", "socialMediaPost", "emailSubject", "approvedAt"]
    },
    "client": {
      "title": "SaaS Client",
      "description": "Represents a single SaaS client who signed up through the wizard.",
      "type": "object",
      "properties": {
        "companyName": { "type": "string" },
        "email": { "type": "string" },
        "firebaseConfig": { "type": "object" },
        "domain": { "type": "string" },
        "setupProgress": {
          "type": "object",
          "properties": {
            "step1": { "type": "boolean" },
            "step2": { "type": "boolean" },
            "step3": { "type": "boolean" }
          }
        },
        "createdAt": { "type": "string", "format": "date-time" },
        "status": { "type": "string", "enum": ["active", "pending"] }
      },
      "required": ["companyName", "email", "domain", "createdAt", "status"]
    },
    "adminProfile": {
      "title": "Admin Profile",
      "description": "Represents a super administrator of the SaaS platform.",
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "role": { "type": "string", "const": "admin" }
      },
      "required": ["name", "role"]
    }
  },
  "auth": {
    "providers": ["anonymous", "google.com"]
  },
  "firestore": {
    "rules": "/**\n * @fileoverview Firestore Security Rules for the application.\n *\n * Core Philosophy:\n * - This ruleset enforces a strict user-ownership model for most data, ensuring users can only access their own resources.\n * - It allows public read access to user profiles.\n *\n * Data Structure:\n * - /users/{userId}: Stores user profile data, accessible for reading by any user, but writable only by the owner.\n * - /messages/{messageId}: Stores chat messages. Accessible for reading by any user, but only the sender can create. Only the sender and recipient can update message status. Only the sender can delete messages.\n * - /calls/{callId}: Stores call signaling data. Users can read their own calls, create calls they initiate, and update/delete calls they're involved in.\n * - /chats/{userId}: Tracks active chat IDs for each user, accessible and writable only by the owner.\n * - /users/{userId}/todos/{todoId}: Stores to-do items for each user, accessible and writable only by the owner.\n * - /users/{userId}/reports/{reportId}: Stores performance reports for each user, accessible and writable only by the owner.\n * - /clientLeads/{leadId}: Stores client leads for the organization, accessible to any authenticated user.\n * - /marketingContent/{contentId}: Stores marketing content for the organization, accessible to any authenticated user.\n *\n * Key Security Decisions:\n * - User listing is explicitly allowed to display user profiles.\n * - Users have full CRUD access only to data under their own /users/{userId} subcollection.\n * - Active chats, to-do items and reports are secured under the owner's user ID.\n *\n * Denormalization for Authorization:\n * - To-Do and Report documents denormalize the userId to simplify ownership checks.\n */\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    /**\n     * @description Grants read access to all users and restricts write access to the owner of the user profile.\n     * @path /users/{userId}\n     * @allow (get, list) Any user can read user profiles.\n     * @allow (create) User with ID 'user123' can create their own profile.\n     *   Request: auth.uid = 'user123', request.resource.data.id = 'user123'\n     * @allow (update) User with ID 'user123' can update their own profile.\n     *   Request: auth.uid = 'user123', resource.data.id = 'user123'\n     * @allow (delete) User with ID 'user123' can delete their own profile.\n     *   Request: auth.uid = 'user123'\n     * @deny (create) User with ID 'user456' attempts to create a profile for user 'user123'.\n     *   Request: auth.uid = 'user456', request.resource.data.id = 'user123'\n     * @deny (update) User with ID 'user456' attempts to update the profile of user 'user123'.\n     *   Request: auth.uid = 'user456', resource.data.id = 'user123'\n     * @deny (delete) User with ID 'user456' attempts to delete the profile of user 'user123'.\n     *   Request: auth.uid = 'user456'\n     * @principle Allows public read access to user profiles while restricting write access to the owner.\n     */\n    match /users/{userId} {\n      allow get, list: if true;\n      allow create: if isSignedIn() && isOwner(userId);\n      allow update: if isSignedIn() && isOwner(userId);\n      allow delete: if isSignedIn() && isOwner(userId);\n    }\n\n    /**\n     * @description Grants read access to all users and restricts write access to the sender of the message.\n     * @path /messages/{messageId}\n     * @allow (get, list) Any user can read messages.\n     * @allow (create) User with ID 'user123' can create a message with senderId 'user123'.\n     *   Request: auth.uid = 'user123', request.resource.data.senderId = 'user123'\n     * @allow (update) User with ID 'user123' can update the read status or deletion status of their messages.\n     *   Request: auth.uid = 'user123', resource.data.senderId = 'user123'\n     * @allow (delete) User with ID 'user123' can delete a message they sent.\n     *   Request: auth.uid = 'user123', resource.data.senderId = 'user123'\n     * @deny (create) User with ID 'user456' attempts to create a message with senderId 'user123'.\n     *   Request: auth.uid = 'user456', request.resource.data.senderId = 'user123'\n     * @deny (update) User with ID 'user456' attempts to update a message they did not send or receive.\n     *   Request: auth.uid = 'user456', resource.data.senderId = 'user123', resource.data.recipientId = 'user789'\n     * @deny (delete) User with ID 'user456' attempts to delete a message sent by user 'user123'.\n     *   Request: auth.uid = 'user456', resource.data.senderId = 'user123'\n     * @principle Allows public read access to messages while restricting write access to the sender and recipient.\n     */\n    match /messages/{messageId} {\n      allow get, list: if true;\n      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;\n      allow update: if isSignedIn() && \n        (\n          (request.auth.uid == resource.data.senderId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readStatus', 'deletedBySender'])) ||\n          (request.auth.uid == resource.data.recipientId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readStatus', 'deletedByRecipient']))\n        );\n      allow delete: if isSignedIn() && request.auth.uid == resource.data.senderId;\n    }\n\n    /**\n     * @description Manages access to call signaling documents.\n     * @path /calls/{callId}\n     * @allow (get, list) Users can read calls where they are either the caller or recipient.\n     *   Request: auth.uid = 'user123', (resource.data.callerId = 'user123' OR resource.data.recipientId = 'user123')\n     * @allow (create) User with ID 'user123' can create a call with callerId 'user123'.\n     *   Request: auth.uid = 'user123', request.resource.data.callerId = 'user123'\n     * @allow (update) Users involved in the call can update its status.\n     *   Request: auth.uid = 'user123', (resource.data.callerId = 'user123' OR resource.data.recipientId = 'user123')\n     * @allow (delete) Users involved in the call can delete it.\n     *   Request: auth.uid = 'user123', (resource.data.callerId = 'user123' OR resource.data.recipientId = 'user123')\n     * @deny (create) User with ID 'user456' attempts to create a call with callerId 'user123'.\n     *   Request: auth.uid = 'user456', request.resource.data.callerId = 'user123'\n     * @principle Allows users to manage calls they are involved in as either caller or recipient.\n     */\n    match /calls/{callId} {\n        allow read, update, delete: if isSignedIn() && (request.auth.uid == resource.data.recipientId || request.auth.uid == resource.data.callerId);\n        allow create: if isSignedIn() && request.resource.data.callerId == request.auth.uid;\n        allow list: if isSignedIn();\n    }\n\n    /**\n     * @description Restricts access to active chat documents to the owner of the user ID.\n     * @path /chats/{userId}\n     * @allow (get, list) User with ID 'user123' can read their active chats.\n     *   Request: auth.uid = 'user123'\n     * @allow (create) User with ID 'user123' can create their active chats.\n     *   Request: auth.uid = 'user123'\n     * @allow (update) User with ID 'user123' can update their active chats.\n     *   Request: auth.uid = 'user123'\n     * @allow (delete) User with ID 'user123' can delete their active chats.\n     *   Request: auth.uid = 'user123'\n     * @deny (get, list) User with ID 'user456' attempts to read active chats of user 'user123'.\n     *   Request: auth.uid = 'user456'\n     * @deny (create) User with ID 'user456' attempts to create active chats for user 'user123'.\n     *   Request: auth.uid = 'user456'\n     * @deny (update) User with ID 'user456' attempts to update active chats for user 'user123'.\n     *   Request: auth.uid = 'user456'\n     * @deny (delete) User with ID 'user456' attempts to delete active chats for user 'user123'.\n     *   Request: auth.uid = 'user456'\n     * @principle Enforces document ownership for all operations.\n     */\n    match /chats/{userId} {\n        allow read, write: if isSignedIn() && isOwner(userId);\n    }\n\n    /**\n     * @description Restricts access to to-do items to the owner of the user ID.\n     * @path /users/{userId}/todos/{todoId}\n     * @allow (get, list) User with ID 'user123' can read their to-do items.\n     *   Request: auth.uid = 'user123'\n     * @allow (create) User with ID 'user123' can create a to-do item with userId 'user123'.\n     *   Request: auth.uid = 'user123', request.resource.data.userId = 'user123'\n     * @allow (update) User with ID 'user123' can update their to-do item with userId 'user123'.\n     *   Request: auth.uid = 'user123', resource.data.userId = 'user123'\n     * @allow (delete) User with ID 'user123' can delete their to-do item.\n     *   Request: auth.uid = 'user123'\n     * @deny (get, list) User with ID 'user456' attempts to read to-do items of user 'user123'.\n     *   Request: auth.uid = 'user456'\n     * @deny (create) User with ID 'user456' attempts to create a to-do item for user 'user123'.\n     *   Request: auth.uid = 'user456', request.resource.data.userId = 'user123'\n     * @deny (update) User with ID 'user456' attempts to update the to-do item of user 'user123'.\n     *   Request: auth.uid = 'user456', resource.data.userId = 'user123'\n     * @deny (delete) User with ID 'user456' attempts to delete the to-do item of user 'user123'.\n     *   Request: auth.uid = 'user456'\n     * @principle Enforces document ownership for all operations, validates userId on create, and enforces immutability on userId for updates.\n     */\n    match /users/{userId}/todos/{todoId} {\n      allow read, write: if isSignedIn() && isOwner(userId);\n    }\n\n    /**\n     * @description Restricts access to performance reports to the owner of the user ID.\n     * @path /users/{userId}/reports/{reportId}\n     * @allow (get, list) User with ID 'user123' can read their performance reports.\n     *   Request: auth.uid = 'user123'\n     * @allow (create) User with ID 'user123' can create a performance report with userId 'user123'.\n     *   Request: auth.uid = 'user123', request.resource.data.userId = 'user123'\n     * @allow (update) User with ID 'user123' can update their performance report with userId 'user123'.\n     *   Request: auth.uid = 'user123', resource.data.userId = 'user123'\n     * @allow (delete) User with ID 'user123' can delete their performance report.\n     *   Request: auth.uid = 'user123'\n     * @deny (get, list) User with ID 'user456' attempts to read performance reports of user 'user123'.\n     *   Request: auth.uid = 'user456'\n     * @deny (create) User with ID 'user456' attempts to create a performance report for user 'user123'.\n     *   Request: auth.uid = 'user456', request.resource.data.userId = 'user123'\n     * @deny (update) User with ID 'user456' attempts to update the performance report of user 'user123'.\n     *   Request: auth.uid = 'user456', resource.data.userId = 'user123'\n     * @deny (delete) User with ID 'user456' attempts to delete the performance report of user 'user123'.\n     *   Request: auth.uid = 'user456'\n     * @principle Enforces document ownership for all operations, validates userId on create, and enforces immutability on userId for updates.\n     */\n    match /users/{userId}/reports/{reportId} {\n      allow read, write: if isSignedIn() && isOwner(userId);\n    }\n\n    /**\n     * @description Grants read and write access to authenticated users for the client leads collection.\n     * @path /clientLeads/{leadId}\n     * @allow (get, list, create, update, delete) Any authenticated user can manage client leads.\n     *   Request: auth.uid != null\n     * @principle Allows collaborative management of client leads across the organization.\n     */\n    match /clientLeads/{leadId} {\n      allow read, write: if isSignedIn();\n    }\n\n    /**\n     * @description Grants read and write access to authenticated users for the marketing content collection.\n     * @path /marketingContent/{contentId}\n     * @allow (get, list, create, update, delete) Any authenticated user can manage marketing content.\n     *   Request: auth.uid != null\n     * @principle Allows collaborative management of marketing content across the organization.\n     */\n    match /marketingContent/{contentId} {\n      allow read, write: if isSignedIn();\n    }\n\n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    function isExistingOwner(userId) {\n      return isOwner(userId) && resource != null;\n    }\n  }\n}",
    "/users/{userId}": {
      "schema": { "$ref": "#/entities/userProfile" },
      "description": "Stores individual user profile data."
    },
    "/messages/{messageId}": {
        "schema": { "$ref": "#/entities/chatMessage" },
        "description": "Stores all chat messages."
    },
    "/calls/{callId}": {
      "schema": { "$ref": "#/entities/call" },
      "description": "Stores call signaling documents for real-time communication."
    },
    "/chats/{userId}": {
        "schema": { "$ref": "#/entities/activeChats" },
        "description": "Document tracking active chat IDs for a specific user."
    },
    "/users/{userId}/todos/{todoId}": {
      "schema": { "$ref": "#/entities/todo" },
      "description": "Stores to-do items for a specific user."
    },
    "/users/{userId}/reports/{reportId}": {
        "schema": { "$ref": "#/entities/report" },
        "description": "Stores performance reports for a specific user."
    },
    "/clientLeads/{leadId}": {
        "schema": { "$ref": "#/entities/clientLead" },
        "description": "Stores all client leads for the organization."
    },
    "/marketingContent/{contentId}": {
        "schema": { "$ref": "#/entities/marketingContent" },
        "description": "Stores all approved marketing content."
    },
    "/clients/{clientId}": {
      "schema": { "$ref": "#/entities/client" },
      "description": "Stores documents for each SaaS client."
    },
    "/admins/{adminId}": {
      "schema": { "$ref": "#/entities/adminProfile" },
      "description": "Stores profiles for super administrators."
    }
  }
}

    